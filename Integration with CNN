# Combine CNN and LSTM models
def create_cnn_lstm_model(cnn_input_shape, lstm_input_shape, num_classes):
    # CNN for feature extraction
    cnn_model = create_cnn_feature_extractor(cnn_input_shape, num_classes=None)  # No output layer
    cnn_model = models.Sequential(cnn_model.layers[:-3])  # Remove the last dense layers

    # LSTM for sequential learning
    lstm_model = create_lstm_model(lstm_input_shape, num_classes)

    # Combined model
    combined_model = models.Sequential()
    combined_model.add(cnn_model)
    combined_model.add(layers.TimeDistributed(layers.Flatten()))  # Flatten CNN output for LSTM
    combined_model.add(lstm_model)

    return combined_model

# Example usage
cnn_input_shape = (128, 128, 1)  # Input shape for CNN
lstm_input_shape = (100, 128)    # Input shape for LSTM (time steps, features)
num_classes = 2                  # Binary classification

# Create the combined model
combined_model = create_cnn_lstm_model(cnn_input_shape, lstm_input_shape, num_classes)

# Compile the model
combined_model.compile(optimizer='adam',
                       loss='sparse_categorical_crossentropy',
                       metrics=['accuracy'])

# Print model summary
combined_model.summary()

# Example input data (replace with actual data)
X_train = np.random.rand(1000, 128, 128, 1)  # 1000 samples of 128x128 matrices
y_train = np.random.randint(0, 2, 1000)      # Binary labels for 1000 samples

# Train the model
combined_model.fit(X_train, y_train, epochs=10, batch_size=32)
