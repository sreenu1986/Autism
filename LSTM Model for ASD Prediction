import tensorflow as tf
from tensorflow.keras import layers, models

# Define the LSTM model for ASD prediction
def create_lstm_model(input_shape, num_classes):
    model = models.Sequential()

    # LSTM Layer
    model.add(layers.LSTM(128, return_sequences=True, input_shape=input_shape))  # First LSTM layer
    model.add(layers.Dropout(0.5))  # Dropout for regularization
    model.add(layers.LSTM(64, return_sequences=False))  # Second LSTM layer
    model.add(layers.Dropout(0.5))  # Dropout for regularization

    # Fully Connected Layer
    model.add(layers.Dense(64, activation='relu'))
    model.add(layers.Dropout(0.5))  # Dropout for regularization

    # Output Layer with Softmax Activation
    model.add(layers.Dense(num_classes, activation='softmax'))

    return model

# Example usage
input_shape = (100, 128)  # Example input shape (time steps, features)
num_classes = 2  # Binary classification (ASD-positive or ASD-negative)

# Create the LSTM model
lstm_model = create_lstm_model(input_shape, num_classes)

# Compile the model
lstm_model.compile(optimizer='adam',
                   loss='sparse_categorical_crossentropy',
                   metrics=['accuracy'])

# Print model summary
lstm_model.summary()

# Example input data (replace with actual data)
import numpy as np
X_train = np.random.rand(1000, 100, 128)  # 1000 samples, 100 time steps, 128 features
y_train = np.random.randint(0, 2, 1000)  # Binary labels for 1000 samples

# Train the model
lstm_model.fit(X_train, y_train, epochs=10, batch_size=32)
